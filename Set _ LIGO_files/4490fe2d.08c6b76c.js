(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{181:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return b}));var n=a(3),i=a(7),o=(a(0),a(457)),l=a(459),p=a(464),r={id:"toplevel",title:"Top-Level",description:"Available functions at the top level",hide_table_of_contents:!0},s={unversionedId:"reference/toplevel",id:"version-0.25.0/reference/toplevel",isDocsHomePage:!1,title:"Top-Level",description:"Available functions at the top level",source:"@site/versioned_docs/version-0.25.0/reference/toplevel.md",slug:"/reference/toplevel",permalink:"/docs/reference/toplevel",version:"0.25.0",sidebar:"version-0.25.0/docs",previous:{title:"transpile-expression",permalink:"/docs/manpages/transpile-expression"},next:{title:"Big_map",permalink:"/docs/reference/big-map-reference"}},c=[],y={toc:c};function b(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},y,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"These types and functions are available without any needed prefix."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type address"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type address"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type address"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type address"),Object(o.b)("p",null,"An untyped address which can refer to a smart contract or account."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type big_map ('key, 'value)"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type ('key, 'value) big_map"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type big_map ('key, 'value)"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type big_map <'key, 'value>"),Object(o.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(o.b)("p",null,"The type of a big map from values of type ",Object(o.b)("inlineCode",{parentName:"p"},"key")," to\nvalues of type ",Object(o.b)("inlineCode",{parentName:"p"},"value")," is ",Object(o.b)("inlineCode",{parentName:"p"},"big_map (key, value)"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),"type move is int * int\ntype register is big_map (address, move)\n"))),Object(o.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(o.b)("p",null,"The type of a big map from values of type ",Object(o.b)("inlineCode",{parentName:"p"},"key")," to values\nof type ",Object(o.b)("inlineCode",{parentName:"p"},"value")," is ",Object(o.b)("inlineCode",{parentName:"p"},"(key, value) big_map"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=big_map",group:"big_map"}),"type move = int * int\ntype register = (address, move) big_map\n"))),Object(o.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(o.b)("p",null,"The type of a big map from values of type ",Object(o.b)("inlineCode",{parentName:"p"},"key")," to\nvalues of type ",Object(o.b)("inlineCode",{parentName:"p"},"value")," is ",Object(o.b)("inlineCode",{parentName:"p"},"big_map(key, value)"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=big_map",group:"big_map"}),"type move = (int, int);\ntype register = big_map(address, move);\n"))),Object(o.b)(l.b,{syntax:"jsligo",mdxType:"Syntax"},Object(o.b)("p",null,"The type of a big map from values of type ",Object(o.b)("inlineCode",{parentName:"p"},"key")," to\nvalues of type ",Object(o.b)("inlineCode",{parentName:"p"},"value")," is ",Object(o.b)("inlineCode",{parentName:"p"},"big_map<key, value>"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=big_map",group:"big_map"}),"type move = [int, int];\ntype register = big_map<address, move>;\n"))),Object(o.b)("p",null,"Be aware that a ",Object(o.b)("inlineCode",{parentName:"p"},"big_map")," cannot appear inside another ",Object(o.b)("inlineCode",{parentName:"p"},"big_map"),"."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type bool"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type bool"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type bool"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type bool"),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type bytes"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type bytes"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type bytes"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type bytes"),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type contract('parameter)"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type 'parameter contract"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type contract('parameter)"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type contract<'parameter>"),Object(o.b)("p",null,"A typed contract. "),Object(o.b)("p",null,"Use ",Object(o.b)("inlineCode",{parentName:"p"},"unit")," as ",Object(o.b)("inlineCode",{parentName:"p"},"parameter")," to indicate an implicit account. "),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type chain_id"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type chain_id"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type chain_id"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type chain_id"),Object(o.b)("p",null,"The identifier of a chain, used to indicate test or main chains."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type int"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type int"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type int"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type int"),Object(o.b)("p",null,"An integer. "),Object(o.b)("p",null,"The only size limit to integers is gas."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type key"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type key"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type key"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type key"),Object(o.b)("p",null,"A public cryptographic key."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type key_hash"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type key_hash"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type key_hash"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type key_hash"),Object(o.b)("p",null,"The hash of a public cryptographic key."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type list ('t)"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type 't list"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type list('t)"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type list<'t>"),Object(o.b)("p",null,"A sequence of elements of the same type."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type map ('key, 'value)"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type ('key, 'value) map"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type map ('key, 'value)"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type map <'key, 'value>"),Object(o.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(o.b)("p",null,"The type of a map from values of type ",Object(o.b)("inlineCode",{parentName:"p"},"key")," to\nvalues of type ",Object(o.b)("inlineCode",{parentName:"p"},"value")," is ",Object(o.b)("inlineCode",{parentName:"p"},"map (key, value)"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=maps",group:"maps"}),"type move is int * int\ntype register is map (address, move)\n"))),Object(o.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(o.b)("p",null,"The type of a map from values of type ",Object(o.b)("inlineCode",{parentName:"p"},"key")," to values\nof type ",Object(o.b)("inlineCode",{parentName:"p"},"value")," is ",Object(o.b)("inlineCode",{parentName:"p"},"(key, value) map"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=maps",group:"maps"}),"type move = int * int\ntype register = (address, move) map\n"))),Object(o.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(o.b)("p",null,"The type of a map from values of type ",Object(o.b)("inlineCode",{parentName:"p"},"key")," to\nvalues of type ",Object(o.b)("inlineCode",{parentName:"p"},"value")," is ",Object(o.b)("inlineCode",{parentName:"p"},"map (key, value)"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=maps",group:"maps"}),"type move = (int, int);\ntype register = map (address, move);\n"))),Object(o.b)(l.b,{syntax:"jsligo",mdxType:"Syntax"},Object(o.b)("p",null,"The type of a map from values of type ",Object(o.b)("inlineCode",{parentName:"p"},"key")," to\nvalues of type ",Object(o.b)("inlineCode",{parentName:"p"},"value")," is ",Object(o.b)("inlineCode",{parentName:"p"},"map <key, value>"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=maps",group:"maps"}),"type move = [int, int];\ntype register = map <address, move>;\n"))),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type nat"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type nat"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type nat"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type nat"),Object(o.b)("p",null,"A natural number."),Object(o.b)("p",null,"The only size limit to natural numbers is gas."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type operation"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type operation"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type operation"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type operation"),Object(o.b)("p",null,"An operation emitted by the contract"),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type set ('value)"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type 'value set"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type set('value)"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type set<'value>"),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type signature"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type signature"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type signature"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type signature"),Object(o.b)("p",null,"A cryptographic signature."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type string"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type string"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type string"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type string"),Object(o.b)("p",null,"A sequence of characters."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type tez"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type tez"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type tez"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type tez"),Object(o.b)("p",null,"A specific type for tokens."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type timestamp"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type timestamp"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type timestamp"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type timestamp"),Object(o.b)("p",null,"A date in the real world."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type unit"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type unit"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type unit"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type unit"),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function is_nat: int -> option(nat)"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val is_nat: int -> nat option"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let is_nat: int => option(nat)"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let is_nat: (i: int) => option<nat>"),Object(o.b)("p",null,"Convert an ",Object(o.b)("inlineCode",{parentName:"p"},"int")," to a ",Object(o.b)("inlineCode",{parentName:"p"},"nat")," if possible."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function abs: int -> nat"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val abs: int -> nat"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let abs: int => nat"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let abs: (i: int) => nat"),Object(o.b)("p",null,"Cast an ",Object(o.b)("inlineCode",{parentName:"p"},"int")," to ",Object(o.b)("inlineCode",{parentName:"p"},"nat"),"."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function int: nat -> int"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val int: nat -> int"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let int: nat => int"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let int: (n: nat) => int"),Object(o.b)("p",null,"Cast an ",Object(o.b)("inlineCode",{parentName:"p"},"nat")," to ",Object(o.b)("inlineCode",{parentName:"p"},"int"),"."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"const unit: unit"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val unit: unit"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let (): unit"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let unit: unit"),Object(o.b)("p",null,"A helper to create a unit."),Object(o.b)("a",{name:"failwith"}),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function failwith : 'a -> unit"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val failwith : 'a -> unit"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let failwith: 'a => unit"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let failwith: (message: 'a) => unit"),Object(o.b)("p",null,"Cause the contract to fail with an error message or integer. Other types are\nnot supported at the moment."),Object(o.b)("p",null,"Using this currently requires in general a type annotation on the\n",Object(o.b)("inlineCode",{parentName:"p"},"failwith")," call."),Object(o.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo"}),'function main (const p : int; const s : unit) : list (operation) * unit is\n  block {\n    if p > 10 then failwith ("Failure.") else skip\n  }\n  with ((nil : list (operation)), s)\n'))),Object(o.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo"}),'let main (p,s : int * unit) = if p > 10 then failwith "Failure."\n'))),Object(o.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo"}),'let main = ((p,s) : (int, unit)) =>\n  if (p > 10) { failwith ("Failure."); };\n'))),Object(o.b)(l.b,{syntax:"jsligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo"}),'let main = ([p, s] : [int, unit]): unit => {\n  if (p > 10) { failwith ("Failure."); };\n};\n'))),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function assert : bool -> unit"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val assert : bool -> unit"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let assert: bool => unit"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let assert: (condition: bool) => unit"),Object(o.b)("p",null,"Check if a certain condition has been met. If not the contract will fail."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function ediv : int -> int -> option (int * nat)"),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function ediv : mutez -> nat -> option (mutez * mutez)"),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function ediv : mutez -> mutez -> option (nat * mutez)"),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function ediv : nat -> nat -> option (nat * nat)"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val ediv : int -> int -> (int * nat) option"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val ediv : mutez -> nat -> (mutez * mutez) option"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val ediv : mutez -> mutez -> (nat * mutez) option"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val ediv : nat -> nat -> (nat * nat) option"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let ediv: (int, int) => option((int, nat))"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let ediv: (mutez, nat) => option((mutez, mutez))"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let ediv: (mutez, mutez) => option((nat, mutez))"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let ediv: (nat, nat) => option((nat, nat))"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let ediv: (value: int, divided_by: int) => option<[int, nat]>"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let ediv: (value: mutez, divided_by: nat) => option<[mutez, mutez]>"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let ediv: (value: mutez, divided_by: mutez) => option<[nat, mutez]>"),Object(o.b)(p.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let ediv: (value: nat, divided_by: nat) => option<[nat, nat]>"),Object(o.b)("p",null,"Compiles to Michelson ",Object(o.b)("inlineCode",{parentName:"p"},"EDIV"),", one operation to get both the quotient and remainder of a division. ",Object(o.b)("inlineCode",{parentName:"p"},"ediv x y")," returns None if ",Object(o.b)("inlineCode",{parentName:"p"},"y")," is zero, otherwise returns ",Object(o.b)("inlineCode",{parentName:"p"},"Some (quotient, remainder)")," such that ",Object(o.b)("inlineCode",{parentName:"p"},"x = (quotient * y) + remainder")," and ",Object(o.b)("inlineCode",{parentName:"p"},"0 <= remainder < abs(y)"),"."),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type sapling_state (N)"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type N sapling_state"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type sapling_state(N)"),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type sapling_transaction (N)"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type N sapling_transaction"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type sapling_transaction(N)"),Object(o.b)(p.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type ticket 'v"),Object(o.b)(p.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type 'v ticket"),Object(o.b)(p.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type ticket('v)"),Object(o.b)("p",null,"Edo protocol introduced the following ticket type.\nFollow this ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://gitlab.com/ligolang/ligo/-/blob/dev/src/test/contracts/ticket_wallet.mligo"}),"wallet example")," for an example of\ncorrect usage (it goes with its ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://gitlab.com/ligolang/ligo/-/blob/dev/src/test/contracts/ticket_builder.mligo"}),"builder"),").\nThis ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://medium.com/tezos-israel/tickets-on-edo-simply-explained-c5a411cc27f9"}),"article")," might also be useful."),Object(o.b)("p",null,"Note that a variable containing a ticket can only be used once (they are not ",Object(o.b)("inlineCode",{parentName:"p"},"DUP"),"-able)."),Object(o.b)("p",null,"The ticket type can be defined over a comparable type ",Object(o.b)("inlineCode",{parentName:"p"},"'v"),".\n",Object(o.b)("inlineCode",{parentName:"p"},"'v")," being the type of the value used to identify a given ticket."),Object(o.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=ticket_t",group:"ticket_t"}),"type va is int\ntype my_ticket is ticket (va)\n"))),Object(o.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=ticket_t",group:"ticket_t"}),"type va = int\ntype my_ticket = va ticket\n"))),Object(o.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=ticket_t",group:"ticket_t"}),"type va = int;\ntype my_ticket = ticket(va);\n"))))}b.isMDXComponent=!0},457:function(e,t,a){"use strict";a.d(t,"a",(function(){return y})),a.d(t,"b",(function(){return u}));var n=a(0),i=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=i.a.createContext({}),c=function(e){var t=i.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},y=function(e){var t=c(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),y=c(a),m=n,u=y["".concat(l,".").concat(m)]||y[m]||b[m]||o;return a?i.a.createElement(u,p(p({ref:t},s),{},{components:a})):i.a.createElement(u,p({ref:t},s))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=m;var p={};for(var r in t)hasOwnProperty.call(t,r)&&(p[r]=t[r]);p.originalType=e,p.mdxType="string"==typeof e?e:n,l[1]=p;for(var s=2;s<o;s++)l[s]=a[s];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},458:function(e,t,a){"use strict";var n=a(0),i=a.n(n).a.createContext("pascaligo");t.a=i},459:function(e,t,a){"use strict";var n=a(0),i=a.n(n),o=a(458);a.d(t,"a",(function(){return o.a})),t.b=function(e){return i.a.createElement(o.a.Consumer,null,(function(t){return t===e.syntax?e.children:i.a.createElement(i.a.Fragment,null)}))}},460:function(e,t,a){"use strict";a.r(t),a.d(t,"Prism",(function(){return n.a})),a.d(t,"defaultProps",(function(){return l}));var n=a(22),i={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","at-rule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]},o=a(0),l={Prism:n.a,theme:i};function p(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var s=/\r\n|\r|\n/,c=function(e){0===e.length?e.push({types:["plain"],content:"",empty:!0}):1===e.length&&""===e[0].content&&(e[0].empty=!0)},y=function(e,t){var a=e.length;return a>0&&e[a-1]===t?e:e.concat(t)},b=function(e,t){var a=e.plain,n=Object.create(null),i=e.styles.reduce((function(e,a){var n=a.languages,i=a.style;return n&&!n.includes(t)||a.types.forEach((function(t){var a=r({},e[t],i);e[t]=a})),e}),n);return i.root=a,i.plain=r({},a,{backgroundColor:null}),i};function m(e,t){var a={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&-1===t.indexOf(n)&&(a[n]=e[n]);return a}var u=function(e){function t(){for(var t=this,a=[],n=arguments.length;n--;)a[n]=arguments[n];e.apply(this,a),p(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var a=e.theme?b(e.theme,e.language):void 0;return t.themeDict=a})),p(this,"getLineProps",(function(e){var a=e.key,n=e.className,i=e.style,o=r({},m(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),l=t.getThemeDict(t.props);return void 0!==l&&(o.style=l.plain),void 0!==i&&(o.style=void 0!==o.style?r({},o.style,i):i),void 0!==a&&(o.key=a),n&&(o.className+=" "+n),o})),p(this,"getStyleForToken",(function(e){var a=e.types,n=e.empty,i=a.length,o=t.getThemeDict(t.props);if(void 0!==o){if(1===i&&"plain"===a[0])return n?{display:"inline-block"}:void 0;if(1===i&&!n)return o[a[0]];var l=n?{display:"inline-block"}:{},p=a.map((function(e){return o[e]}));return Object.assign.apply(Object,[l].concat(p))}})),p(this,"getTokenProps",(function(e){var a=e.key,n=e.className,i=e.style,o=e.token,l=r({},m(e,["key","className","style","token"]),{className:"token "+o.types.join(" "),children:o.content,style:t.getStyleForToken(o),key:void 0});return void 0!==i&&(l.style=void 0!==l.style?r({},l.style,i):i),void 0!==a&&(l.key=a),n&&(l.className+=" "+n),l}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,a=e.language,n=e.code,i=e.children,o=this.getThemeDict(this.props),l=t.languages[a];return i({tokens:function(e){for(var t=[[]],a=[e],n=[0],i=[e.length],o=0,l=0,p=[],r=[p];l>-1;){for(;(o=n[l]++)<i[l];){var b=void 0,m=t[l],u=a[l][o];if("string"==typeof u?(m=l>0?m:["plain"],b=u):(m=y(m,u.type),u.alias&&(m=y(m,u.alias)),b=u.content),"string"==typeof b){var d=b.split(s),x=d.length;p.push({types:m,content:d[0]});for(var g=1;g<x;g++)c(p),r.push(p=[]),p.push({types:m,content:d[g]})}else l++,t.push(m),a.push(b),n.push(0),i.push(b.length)}l--,t.pop(),a.pop(),n.pop(),i.pop()}return c(p),r}(void 0!==l?t.tokenize(n,l,a):[n]),className:"prism-code language-"+a,style:void 0!==o?o.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(o.Component);t.default=u},461:function(e,t,a){"use strict";var n=a(0),i=a(463);t.a=function(){var e=Object(n.useContext)(i.a);if(null==e)throw new Error("`useThemeContext` is used outside of `Layout` Component. See https://v2.docusaurus.io/docs/theme-classic#usethemecontext.");return e}},462:function(e,t,a){"use strict";t.a={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}},463:function(e,t,a){"use strict";var n=a(0),i=a.n(n).a.createContext(void 0);t.a=i},464:function(e,t,a){"use strict";var n=a(0),i=a.n(n),o=a(460),l=a(23),p=a(461),r=a(459),s=a(462);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var y=a(460).Prism;y.languages=Object.assign({},y.languages,{pascaligo:{comment:[/\(\*[\s\S]+?\*\)/,/\/\/.*/],string:{pattern:/(?:'(?:''|[^'\r\n])*'|#[&$%]?[a-f\d]+)+|\^[a-z]/i,greedy:!0},keyword:[{pattern:/(^|[^&])\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:dispose|exit|false|new|true)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\b/i,lookbehind:!0}],number:[/(?:[&%]\d+|\$[a-f\d]+)/i,/\b\d+(?:\.\d+)?(?:e[+-]?\d+)?/i],operator:[/\.\.|\*\*|:=|<[<=>]?|>[>=]?|[+\-*\/]=?|[@^=]/i,{pattern:/(^|[^&])\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\b/,lookbehind:!0}],punctuation:/\(\.|\.\)|[()\[\]:;,.]/},reasonligo:Object.assign({},y.languages.reason,{comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]}),cameligo:Object.assign({},y.languages.ocaml,{comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]}),jsligo:y.languages.typescript}),t.a=function(e){var t=Object(l.default)().siteConfig.themeConfig.prism,a=void 0===t?{}:t,y=Object(p.a)().isDarkTheme,b=a.theme||s.a,m=a.darkTheme||b,u=y?m:b,d=Object(n.useState)(!1),x=d[0],g=d[1];return Object(n.useEffect)((function(){g(!0)}),[]),i.a.createElement(r.a.Consumer,null,(function(t){return t===e.syntax?i.a.createElement(o.default,c({},o.defaultProps,{key:x,language:e.syntax,code:e.children,theme:u}),(function(e){var t=e.className,a=(e.style,e.tokens),n=e.getLineProps,o=e.getTokenProps;return i.a.createElement("pre",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},a.map((function(e,t){return i.a.createElement("div",n({line:e,key:t}),e.map((function(e,t){return i.a.createElement("span",o({token:e,key:t}))})))})))})):i.a.createElement("div",null)}))}}}]);