(window.webpackJsonp=window.webpackJsonp||[]).push([[318],{391:function(t,e,a){"use strict";a.r(e),a.d(e,"frontMatter",(function(){return l})),a.d(e,"metadata",(function(){return c})),a.d(e,"toc",(function(){return p})),a.d(e,"default",(function(){return d}));var n=a(3),o=a(7),r=(a(0),a(457)),s=a(459),i=a(464),l={id:"test",title:"Test",description:"Test operations",hide_table_of_contents:!0},c={unversionedId:"reference/test",id:"version-0.25.0/reference/test",isDocsHomePage:!1,title:"Test",description:"Test operations",source:"@site/versioned_docs/version-0.25.0/reference/test.md",slug:"/reference/test",permalink:"/docs/reference/test",version:"0.25.0",sidebar:"version-0.25.0/docs",previous:{title:"Tezos",permalink:"/docs/reference/current-reference"}},p=[],y={toc:p};function d(t){var e=t.components,a=Object(o.a)(t,["components"]);return Object(r.b)("wrapper",Object(n.a)({},y,a,{components:e,mdxType:"MDXLayout"}),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Important: The ",Object(r.b)("inlineCode",{parentName:"p"},"Test")," module is only available inside the ",Object(r.b)("inlineCode",{parentName:"p"},"ligo test")," command. See also ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"../advanced/testing"}),"Testing LIGO"),".")),Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type michelson_program"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type michelson_program"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type michelson_program"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type michelson_program"),"A type for code that's compiled to Michelson.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type test_exec_error = Rejected of (michelson_program * address) | Other"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type test_exec_error = Rejected of (michelson_program * address) | Other"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type test_exec_error = Rejected(michelson_program, address) | Other"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},'type test_exec_error = ["Rejected", michelson_program, address] | ["Other"]'),"A test error.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type test_exec_result = Success | Fail of test_exec_error"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type test_exec_result = Success | Fail of test_exec_error"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type test_exec_result = Success | Fail(test_exec_error)"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},'type test_exec_result = ["Success"] | ["Fail", test_exec_error]'),"A test execution result.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"type typed_address ('p, 's)"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"type ('p, 's) typed_address"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"type typed_address ('p, 's)"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"type typed_address <'p, 's>"),"A type for an address of a contract with parameter `'p` and storage `'s`.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function to_contract : typed_address ('p, 's) -> contract ('p)"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val to_contract : ('p, 's) typed_address -> 'p contract"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let to_contract : (typed_address ('p, 's)) => contract ('p)"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let to_contract = (account: typed_address <'p, 's>) => contract <'p>"),Object(r.b)("p",null,"Get the contract corresponding to the default entrypoint of a typed\naddress: the contract parameter in the result will be the type of the\ndefault entrypoint (generally ",Object(r.b)("inlineCode",{parentName:"p"},"'p"),", but this might differ if ",Object(r.b)("inlineCode",{parentName:"p"},"'p"),'\nincludes a "default" entrypoint).'),Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function to_entrypoint : string -> typed_address ('p, 's) -> contract ('e)"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val to_entrypoint : string -> ('p, 's) typed_address -> 'e contract"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let to_entrypoint : string => (typed_address ('p, 's)) => contract ('e)"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let to_entrypoint = (entrypoint: string, account: typed_address <'p, 's>) => contract <'e>"),Object(r.b)("p",null,'Get the contract corresponding to an entrypoint of a typed address:\nthe contract parameter in the result will be the type of the\nentrypoint, it needs to be annotated, entrypoint string should omit\nthe prefix "%".'),Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function originate_from_file : string -> string -> michelson_program -> tez -> (address * michelson_program * int)"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val originate_from_file : string -> string -> michelson_program -> tez -> (address * michelson_program * int)"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let originate_from_file : string => string => michelson_program => tez => (address, michelson_program, int)"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let originate_from_file = (filepath: string, entrypoint: string, init: michelson_program, balance: tez) => [address, michelson_program, int]"),Object(r.b)("p",null,"Originate a contract with an entrypoint, initial storage and initial balance."),Object(r.b)(s.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"skip",skip:!0}),'const originated = Test.originate_from_file(testme_test, "main", init_storage, 0tez);\nconst addr = originated.0;\nconst program = originated.1;\nconst size = originated.2;\n'))),Object(r.b)(s.b,{syntax:"cameligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"skip",skip:!0}),'let (addr, program, size) = Test.originate_from_file testme_test "main" init_storage 0tez in\n...\n'))),Object(r.b)(s.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"skip",skip:!0}),'let (addr, program, size) = Test.originate_from_file(testme_test,"main", init_storage, 0tez);\n'))),Object(r.b)(s.b,{syntax:"jsligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"skip",skip:!0}),'let [addr, program, size] = Test.originate_from_file(testme_test,"main", init_storage, 0 as tez);\n'))),Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function originate : ('parameter * 'storage -> list (operation) * 'storage) -> 'storage -> tez -> (typed_address ('parameter, 'storage) * michelson_program * int)"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val originate : ('parameter * 'storage -> operation list * 'storage) -> 'storage -> tez -> (('parameter, 'storage) typed_address * michelson_program * int)"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let originate : (('parameter, 'storage) -> (list(operation), 'storage)) => 'storage => tez => (typed_address ('parameter, 'storage), michelson_program, int)"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let originate = (contract: ('parameter, 'storage) => (list <operation>, 'storage), init: 'storage, balance: tez) => [typed_address <'parameter, 'storage>, michelson_program, int]"),Object(r.b)("p",null,"Originate a contract with an entrypoint function, initial storage and initial balance."),Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function set_now : timestamp -> unit"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val set_now : string -> unit"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let set_now: timestamp => unit"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let set_now = (now: timestamp) => unit"),"Set the timestamp of the predecessor block.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function set_source : address -> unit"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val set_source : address -> unit"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let set_source: address => unit"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let set_source = (source: address) => unit"),"Set the source for `Test.transfer` and `Test.originate`.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function set_baker : address -> unit"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val set_baker : address -> unit"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let set_baker: address => unit"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let set_baker = (source: address) => unit"),"Force the baker for `Test.transfer` and `Test.originate`. By default, the first bootstrapped account.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function transfer : address -> michelson_program -> tez -> test_exec_result"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val transfer : address -> michelson_program -> tez -> test_exec_result"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let transfer: (address, michelson_program, tez) => test_exec_result"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let transfer = (addr: address, parameter: michelson_program, amount: tez) => test_exec_result"),"Bake a transaction by sending an amount of tez with a parameter from the current source to another account.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function transfer_exn : address -> michelson_program -> tez -> unit"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val transfer_exn : address -> michelson_program -> tez -> unit"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let transfer_exn: (address, michelson_program, tez) => unit"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let transfer_exn = (addr: address, parameter: michelson_program, amount: tez) => unit"),"Similar as `Test.transfer`, but fails when anything goes wrong.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function transfer_to_contract : contract ('p) -> 'p -> tez -> test_exec_result"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val transfer_to_contract : 'p contract -> 'p -> tez -> test_exec_result"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let transfer_to_contract: (contract ('p), 'p, tez) => test_exec_result"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let transfer_to_contract = (addr: contract<'p>, parameter: 'p, amount: tez) => test_exec_result"),"Bake a transaction by sending an amount of tez with a parameter from the current source to a contract.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function transfer_to_contract_exn : contract ('p) -> 'p -> tez -> unit"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val transfer_to_contract_exn : 'p contract -> 'p -> tez -> unit"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let transfer_to_contract_exn: (contract ('p), 'p, tez) => unit"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let transfer_to_contract_exn = (addr: contract<'p>, parameter: 'p, amount: tez) => unit"),"Similar as `Test.transfer_to_contract`, but fails when anything goes wrong.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function get_storage_of_address : address -> michelson_program"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_storage_of_address : address -> michelson_program"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let get_storage_of_address : (address) => michelson_program"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_storage_of_address = (account: address) => michelson_program"),"Get the storage of an account in `michelson_program`.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function get_storage : typed_address ('p, 's) -> 's"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_storage : ('p, 's) typed_address -> 's"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let get_storage: (typed_address ('p, 's)) => 's"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_storage = (account: typed_address <'p, 's>) => 's"),"Get the storage of a typed account.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function get_balance : address -> tez"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_balance : address -> tez"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let get_balance: (address) => tez"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let get_balance = (account: address) => tez"),"Get the balance of an account in tez.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function michelson_equal : michelson_program -> michelson_program -> bool"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val michelson_equal : michelson_program -> michelson_program -> bool"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let michelson_equal: (michelson_program, michelson_program) => bool"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let michelson_equal = (a: michelson_program, b: michelson_program) => bool"),"Compare two Michelson values.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function log : 'a -> unit"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val log : 'a -> unit"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let log: 'a => unit"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let log = (a: 'a) => unit"),"Log a value.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function reset_state : nat -> list(tez) -> unit"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val reset_state : nat -> tez list -> unit"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let reset_state: (nat, list(tez)) => unit"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let reset_state = (no_of_accounts: nat, amount: list<tez>) => unit"),"Generate a number of random bootstrapped accounts with a default amount of 4000000 tez. The passed list can be used to overwrite the amount. By default, the state only has two bootstrapped accounts.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function nth_bootstrap_account : int -> address"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val nth_bootstrap_account : int -> address"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let nth_bootstrap_account: int => address"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let nth_bootstrap_account = (nth: int) => address"),"Returns the address of the nth bootstrapped account.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function nth_bootstrap_contract : nat -> address"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val nth_bootstrap_contract : nat -> address"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let nth_bootstrap_contract: nat => address"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let nth_bootstrap_contract = (nth: nat) => address"),"Returns the address corresponding to the nth bootstrapped contract.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function bootstrap_contract : tez -> ('parameter * 'storage -> list (operation) * 'storage) -> 'storage -> unit"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val bootstrap_contract : tez -> ('parameter * 'storage -> operation list * 'storage) -> 'storage -> unit"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let bootstrap_contract : tez => (('parameter, 'storage) -> (list(operation), 'storage)) => 'storage => unit"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let bootstrap_contract = (balance: tez, contract: ('parameter, 'storage) => (list <operation>, 'storage), init: 'storage) => unit"),Object(r.b)("p",null,"Setup a bootstrap contract with an entrypoint function, initial\nstorage and initial balance. Bootstrap contracts will be loaded in\norder, and they will be available only after reset."),Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function nth_bootstrap_typed_address : nat -> typed_address ('p, 's)"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val nth_bootstrap_typed_address : int -> ('p, 's) typed_address"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let nth_bootstrap_typed_address: int => typed_address ('p, 's)"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let nth_bootstrap_typed_address = (nth: int) => typed_address <'p, 's>"),"Returns the typed address corresponding to the nth bootstrapped contract currently loaded. The types are inferred from those contracts loaded with `Test.bootstrap_contract` (before reset).",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function last_originations : unit -> map (address * list(address))"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val last_originations : unit -> (address * address list) map"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let last_originations: unit => map (address , list(address))"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let last_originations = (_: unit) => map<address , address list>"),"Returns addresses of orginated accounts in the last transfer. It is given in the form of a map binding the address of the source of the origination operation to the addresses of newly originated accounts.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function compile_value : 'a -> michelson_program"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val compile_value : 'a -> michelson_program"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let compile_value: 'a => michelson_program"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let compile_value = (value: 'a) => michelson_program"),"Compile a LIGO value to Michelson.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function eval : 'a -> michelson_program"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val eval : 'a -> michelson_program"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let eval: 'a => michelson_program"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let eval = (value: 'a) => michelson_program"),"Compile a LIGO value to Michelson. Currently it is a renaming of `compile_value`.",Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function run : ('a -> 'b) -> 'a -> michelson_program"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val run : ('a -> 'b) -> 'a -> michelson_program"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let run : ('a => 'b) => 'a => michelson_program"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let run = (func: ('a => 'b), value: 'a) => michelson_program"),Object(r.b)("p",null,"Run a function on an input, all in Michelson. More concretely:\na) compiles the function argument to Michelson ",Object(r.b)("inlineCode",{parentName:"p"},"f_mich"),";\nb) compiles the value argument (which was evaluated already) to Michelson ",Object(r.b)("inlineCode",{parentName:"p"},"v_mich"),";\nc) runs the Michelson interpreter on the code ",Object(r.b)("inlineCode",{parentName:"p"},"f_mich")," with starting stack ",Object(r.b)("inlineCode",{parentName:"p"},"[ v_mich ]"),"."),Object(r.b)(s.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"test-ligo group=test_run","test-ligo":!0,group:"test_run"}),'type some_r is [@layout:comb] record [ one : int ; two : nat ; three : string ; four : bytes ; five : unit ]\nfunction f(const x : some_r) is x.one\n\nconst test_example = block {\n  function aux(const x : int * nat * string * bytes * unit) is\n    f(record [ one = x.0 ; two = x.1 ; three = x.2 ; four = x.3 ; five = x.4 ]);\n} with Test.run(aux, (1 + 3 + 2, 1n + 2n, "a" ^ "b", 0xFF00, unit))\n'))),Object(r.b)(s.b,{syntax:"cameligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"test-ligo group=test_run","test-ligo":!0,group:"test_run"}),'type some_r = [@layout:comb] { one : int ; two : nat ; three : string ; four : bytes ; five : unit }\nlet f = fun (x:some_r) -> x.one\n\nlet test_example =\n  Test.run (fun (x : (int * nat * string * bytes * unit)) -> f ({ one = x.0 ; two = x.1 ; three = x.2 ; four = x.3 ; five = x.4 } : some_r))\n           (1 + 3 + 2, 1n + 2n, "a" ^ "b", 0xFF00, ())\n'))),Object(r.b)(s.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"test-ligo group=test_run","test-ligo":!0,group:"test_run"}),'type some_r = [@layout:comb] { one : int , two : nat , three : string , four : bytes , five : unit };\nlet f = (x:some_r) => x.one;\n\nlet test_example =\n  Test.run (((x : (int, nat, string, bytes, unit)) => f ({ one : x[0] , two : x[1] , three : x[2] , four : x[3] , five : x[4] } : some_r)),\n           (1 + 3 + 2, 1n + 2n, ("a" ++ "b"), 0xFF00, ()));\n'))),Object(r.b)(s.b,{syntax:"jsligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"test-ligo group=test_run","test-ligo":!0,group:"test_run"}),'type some_r = [@layout:comb] { one : int , two : nat , three : string , four : bytes , five : unit };\nlet f = (x:some_r) : int => x.one;\n\nlet test_example =\n  Test.run (((x : [int, nat, string, bytes, unit]) => f ({ one : x[0] , two : x[1] , three : x[2] , four : x[3] , five : x[4] })),\n           [1 + 3 + 2, ((1 as nat) + (2 as nat)), ("a" + "b"), 0xFF00, unit]);\n'))),Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function mutate_value : nat -> 'a -> option ('a * mutation)"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val mutate_value : nat -> 'a -> ('a * mutation) option"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let mutate_value : (nat, 'a) => option ('a, mutation)"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let mutate_value : (index: nat, value: 'a) => option <['a, mutation]>"),Object(r.b)("p",null,"Mutates a value using a natural number as an index for the available\nmutations, returns an option for indicating whether mutation was\nsuccessful or not."),Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function mutation_test : 'a -> ('a -> 'b) -> option ('b * mutation)"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val mutation_test : 'a -> ('a -> 'b) -> ('b * mutation) option"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let mutation_test : ('a, ('a -> 'b)) => option ('b, mutation)"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let mutation_test : (value: 'a, tester: ('a -> 'b)) => option <['b, mutation]>"),Object(r.b)("p",null,"Given a value to mutate (first argument), it will try all the\nmutations available of it, passing each one to the function (second\nargument). On the first case of non failure when running the function\non a mutation, the value and mutation involved will be returned."),Object(r.b)(i.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function mutation_test_all : 'a -> ('a -> 'b) -> list ('b * mutation)"),Object(r.b)(i.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val mutation_test_all : 'a -> ('a -> 'b) -> ('b * mutation) list"),Object(r.b)(i.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let mutation_test_all : ('a, ('a -> 'b)) => list ('b, mutation)"),Object(r.b)(i.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let mutation_test_all : (value: 'a, tester: ('a -> 'b)) => list <['b, mutation]>"),Object(r.b)("p",null,"Given a value to mutate (first argument), it will try all the\nmutations of it, passing each one to the function (second argument).\nIn case no failure arises when running the function on a mutation, the\nfailure and mutation involved will be added to the list to be\nreturned."))}d.isMDXComponent=!0},457:function(t,e,a){"use strict";a.d(e,"a",(function(){return y})),a.d(e,"b",(function(){return b}));var n=a(0),o=a.n(n);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function s(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?s(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function l(t,e){if(null==t)return{};var a,n,o=function(t,e){if(null==t)return{};var a,n,o={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(o[a]=t[a]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(o[a]=t[a])}return o}var c=o.a.createContext({}),p=function(t){var e=o.a.useContext(c),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},y=function(t){var e=p(t.components);return o.a.createElement(c.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return o.a.createElement(o.a.Fragment,{},e)}},m=o.a.forwardRef((function(t,e){var a=t.components,n=t.mdxType,r=t.originalType,s=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),y=p(a),m=n,b=y["".concat(s,".").concat(m)]||y[m]||d[m]||r;return a?o.a.createElement(b,i(i({ref:e},c),{},{components:a})):o.a.createElement(b,i({ref:e},c))}));function b(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var r=a.length,s=new Array(r);s[0]=m;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:n,s[1]=i;for(var c=2;c<r;c++)s[c]=a[c];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},458:function(t,e,a){"use strict";var n=a(0),o=a.n(n).a.createContext("pascaligo");e.a=o},459:function(t,e,a){"use strict";var n=a(0),o=a.n(n),r=a(458);a.d(e,"a",(function(){return r.a})),e.b=function(t){return o.a.createElement(r.a.Consumer,null,(function(e){return e===t.syntax?t.children:o.a.createElement(o.a.Fragment,null)}))}},460:function(t,e,a){"use strict";a.r(e),a.d(e,"Prism",(function(){return n.a})),a.d(e,"defaultProps",(function(){return s}));var n=a(22),o={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","at-rule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]},r=a(0),s={Prism:n.a,theme:o};function i(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(){return(l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(t[n]=a[n])}return t}).apply(this,arguments)}var c=/\r\n|\r|\n/,p=function(t){0===t.length?t.push({types:["plain"],content:"",empty:!0}):1===t.length&&""===t[0].content&&(t[0].empty=!0)},y=function(t,e){var a=t.length;return a>0&&t[a-1]===e?t:t.concat(e)},d=function(t,e){var a=t.plain,n=Object.create(null),o=t.styles.reduce((function(t,a){var n=a.languages,o=a.style;return n&&!n.includes(e)||a.types.forEach((function(e){var a=l({},t[e],o);t[e]=a})),t}),n);return o.root=a,o.plain=l({},a,{backgroundColor:null}),o};function m(t,e){var a={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&-1===e.indexOf(n)&&(a[n]=t[n]);return a}var b=function(t){function e(){for(var e=this,a=[],n=arguments.length;n--;)a[n]=arguments[n];t.apply(this,a),i(this,"getThemeDict",(function(t){if(void 0!==e.themeDict&&t.theme===e.prevTheme&&t.language===e.prevLanguage)return e.themeDict;e.prevTheme=t.theme,e.prevLanguage=t.language;var a=t.theme?d(t.theme,t.language):void 0;return e.themeDict=a})),i(this,"getLineProps",(function(t){var a=t.key,n=t.className,o=t.style,r=l({},m(t,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),s=e.getThemeDict(e.props);return void 0!==s&&(r.style=s.plain),void 0!==o&&(r.style=void 0!==r.style?l({},r.style,o):o),void 0!==a&&(r.key=a),n&&(r.className+=" "+n),r})),i(this,"getStyleForToken",(function(t){var a=t.types,n=t.empty,o=a.length,r=e.getThemeDict(e.props);if(void 0!==r){if(1===o&&"plain"===a[0])return n?{display:"inline-block"}:void 0;if(1===o&&!n)return r[a[0]];var s=n?{display:"inline-block"}:{},i=a.map((function(t){return r[t]}));return Object.assign.apply(Object,[s].concat(i))}})),i(this,"getTokenProps",(function(t){var a=t.key,n=t.className,o=t.style,r=t.token,s=l({},m(t,["key","className","style","token"]),{className:"token "+r.types.join(" "),children:r.content,style:e.getStyleForToken(r),key:void 0});return void 0!==o&&(s.style=void 0!==s.style?l({},s.style,o):o),void 0!==a&&(s.key=a),n&&(s.className+=" "+n),s}))}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.render=function(){var t=this.props,e=t.Prism,a=t.language,n=t.code,o=t.children,r=this.getThemeDict(this.props),s=e.languages[a];return o({tokens:function(t){for(var e=[[]],a=[t],n=[0],o=[t.length],r=0,s=0,i=[],l=[i];s>-1;){for(;(r=n[s]++)<o[s];){var d=void 0,m=e[s],b=a[s][r];if("string"==typeof b?(m=s>0?m:["plain"],d=b):(m=y(m,b.type),b.alias&&(m=y(m,b.alias)),d=b.content),"string"==typeof d){var u=d.split(c),g=u.length;i.push({types:m,content:u[0]});for(var x=1;x<g;x++)p(i),l.push(i=[]),i.push({types:m,content:u[x]})}else s++,e.push(m),a.push(d),n.push(0),o.push(d.length)}s--,e.pop(),a.pop(),n.pop(),o.pop()}return p(i),l}(void 0!==s?e.tokenize(n,s,a):[n]),className:"prism-code language-"+a,style:void 0!==r?r.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},e}(r.Component);e.default=b},461:function(t,e,a){"use strict";var n=a(0),o=a(463);e.a=function(){var t=Object(n.useContext)(o.a);if(null==t)throw new Error("`useThemeContext` is used outside of `Layout` Component. See https://v2.docusaurus.io/docs/theme-classic#usethemecontext.");return t}},462:function(t,e,a){"use strict";e.a={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}},463:function(t,e,a){"use strict";var n=a(0),o=a.n(n).a.createContext(void 0);e.a=o},464:function(t,e,a){"use strict";var n=a(0),o=a.n(n),r=a(460),s=a(23),i=a(461),l=a(459),c=a(462);function p(){return(p=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(t[n]=a[n])}return t}).apply(this,arguments)}var y=a(460).Prism;y.languages=Object.assign({},y.languages,{pascaligo:{comment:[/\(\*[\s\S]+?\*\)/,/\/\/.*/],string:{pattern:/(?:'(?:''|[^'\r\n])*'|#[&$%]?[a-f\d]+)+|\^[a-z]/i,greedy:!0},keyword:[{pattern:/(^|[^&])\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:dispose|exit|false|new|true)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\b/i,lookbehind:!0}],number:[/(?:[&%]\d+|\$[a-f\d]+)/i,/\b\d+(?:\.\d+)?(?:e[+-]?\d+)?/i],operator:[/\.\.|\*\*|:=|<[<=>]?|>[>=]?|[+\-*\/]=?|[@^=]/i,{pattern:/(^|[^&])\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\b/,lookbehind:!0}],punctuation:/\(\.|\.\)|[()\[\]:;,.]/},reasonligo:Object.assign({},y.languages.reason,{comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]}),cameligo:Object.assign({},y.languages.ocaml,{comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]}),jsligo:y.languages.typescript}),e.a=function(t){var e=Object(s.default)().siteConfig.themeConfig.prism,a=void 0===e?{}:e,y=Object(i.a)().isDarkTheme,d=a.theme||c.a,m=a.darkTheme||d,b=y?m:d,u=Object(n.useState)(!1),g=u[0],x=u[1];return Object(n.useEffect)((function(){x(!0)}),[]),o.a.createElement(l.a.Consumer,null,(function(e){return e===t.syntax?o.a.createElement(r.default,p({},r.defaultProps,{key:g,language:t.syntax,code:t.children,theme:b}),(function(t){var e=t.className,a=(t.style,t.tokens),n=t.getLineProps,r=t.getTokenProps;return o.a.createElement("pre",{className:e,style:{backgroundColor:"var(--ifm-background-color)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},a.map((function(t,e){return o.a.createElement("div",n({line:t,key:e}),t.map((function(t,e){return o.a.createElement("span",r({token:t,key:e}))})))})))})):o.a.createElement("div",null)}))}}}]);