(window.webpackJsonp=window.webpackJsonp||[]).push([[252],{326:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return l})),t.d(a,"metadata",(function(){return p})),t.d(a,"toc",(function(){return c})),t.d(a,"default",(function(){return m}));var n=t(3),r=t(7),o=(t(0),t(457)),i=t(459),s=t(464),l={id:"big-map-reference",title:"Big_map",description:"A lazily deserialised map that's intended to store large amounts of data.",hide_table_of_contents:!0},p={unversionedId:"reference/big-map-reference",id:"version-0.25.0/reference/big-map-reference",isDocsHomePage:!1,title:"Big_map",description:"A lazily deserialised map that's intended to store large amounts of data.",source:"@site/versioned_docs/version-0.25.0/reference/big_map.md",slug:"/reference/big-map-reference",permalink:"/docs/reference/big-map-reference",version:"0.25.0",sidebar:"version-0.25.0/docs",previous:{title:"Top-Level",permalink:"/docs/reference/toplevel"},next:{title:"Bitwise",permalink:"/docs/reference/bitwise-reference"}},c=[],b={toc:c};function m(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},b,t,{components:a,mdxType:"MDXLayout"}),Object(o.b)("p",null,'A lazily deserialised map that\'s intended to store large amounts of data.\n"Lazily" means that storage is read or written per key on demand. Therefore\nthere are no ',Object(o.b)("inlineCode",{parentName:"p"},"map"),", ",Object(o.b)("inlineCode",{parentName:"p"},"fold"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"iter")," operations as there are in\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/reference/map-reference"}),"Map"),"."),Object(o.b)("p",null,"Compared to non-lazy maps, which have a high upfront gas cost to deserialise all\nthe data and then have cheaper access costs thereafter, lazily-deserialised maps\nspread this cost out across each access, increasing the per-access gas costs,\nbut providing a cheaper overall cost when only a small portion of a large\ndata-set is needed."),Object(o.b)(s.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function empty : big_map ('key, 'value)"),Object(o.b)(s.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val empty : ('key, 'value) big_map"),Object(o.b)(s.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let empty: big_map('key, 'value)"),Object(o.b)(s.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let empty: big_map<'key, 'value>"),Object(o.b)("p",null,"Create an empty big_map."),Object(o.b)(i.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),"type move is int * int\ntype register is big_map (address, move)\n\nconst empty : register = Big_map.empty\n")),Object(o.b)("p",null,"Alternatively, you can also create an empty big_map using:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),"const empty_alternative : register = big_map []\n"))),Object(o.b)(i.b,{syntax:"cameligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=big_map",group:"big_map"}),"type move = int * int\ntype register = (address, move) big_map\n\nlet empty : register = Big_map.empty\n"))),Object(o.b)(i.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=big_map",group:"big_map"}),"type move = (int, int);\ntype register = big_map(address, move);\n\nlet empty: register = Big_map.empty\n"))),Object(o.b)(i.b,{syntax:"jsligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=big_map",group:"big_map"}),"type move = [int, int];\ntype register = big_map<address, move>;\n\nlet empty: register = Big_map.empty;\n"))),Object(o.b)(s.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function literal : list ('key * 'value) -> big_map ('key, 'value)"),Object(o.b)(s.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val literal : ('key * 'value) list -> ('key, 'value) big_map"),Object(o.b)(s.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let literal: list(('key, 'value)) => big_map('key, 'value)"),Object(o.b)(s.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let literal: (items: list<['key, 'value]>) => big_map<'key, 'value>"),Object(o.b)("p",null,"Create a non-empty big_map."),Object(o.b)(i.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),'const moves : register =\n  Big_map.literal (list [\n    (("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" : address), (1,2));\n    (("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" : address), (0,3))]);\n')),Object(o.b)("p",null,"Alternative way of creating an empty big_map:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),'const moves_alternative : register =\n  big_map [\n    ("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" : address) -> (1,2);\n    ("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" : address) -> (0,3)];\n'))),Object(o.b)(i.b,{syntax:"cameligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=big_map",group:"big_map"}),'let moves : register =\n  Big_map.literal [\n    (("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" : address), (1,2));\n    (("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" : address), (0,3))]\n'))),Object(o.b)(i.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=big_map",group:"big_map"}),'let moves: register =\n  Big_map.literal ([\n    ("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" : address, (1,2)),\n    ("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" : address, (0,3))]);\n'))),Object(o.b)(i.b,{syntax:"jsligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=big_map",group:"big_map"}),'let moves: register =\n  Big_map.literal (list([\n    [("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" as address), [1, 2]],\n    [("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" as address), [0, 3]]]));\n'))),Object(o.b)(s.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function find_opt : 'key -> big_map ('key, 'value) -> option 'value"),Object(o.b)(s.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val find_opt : 'key -> ('key, 'value) big_map -> 'value option"),Object(o.b)(s.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let find_opt: ('key, big_map ('key, 'value)) => option ('value)"),Object(o.b)(s.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let find_opt: (key: 'key, big_map: big_map <'key, 'value>) => option <'value>"),Object(o.b)("p",null,"Retrieve a value from a big map with the given key. "),Object(o.b)("p",null,"Because the key may be missing in the big map, the result is an\n",Object(o.b)("em",{parentName:"p"},"optional value"),"."),Object(o.b)(i.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),'const my_balance : option (move) =\n  Big_map.find_opt (("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" : address), moves)\n')),Object(o.b)("p",null,"Alternatively:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),'const my_balance_alternative : option (move) =\n  moves [("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" : address)];\n'))),Object(o.b)(i.b,{syntax:"cameligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=big_map",group:"big_map"}),'let my_balance : move option =\n  Big_map.find_opt ("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" : address) moves\n'))),Object(o.b)(i.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=big_map",group:"big_map"}),'let my_balance: option (move) =\n  Big_map.find_opt("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN": address, moves);\n'))),Object(o.b)(i.b,{syntax:"jsligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=big_map",group:"big_map"}),'let my_balance: option <move> =\n  Big_map.find_opt(("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" as address), moves);\n'))),Object(o.b)(s.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function mem : 'key -> big_map ('key, 'value) -> bool"),Object(o.b)(s.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val mem : 'key -> ('key, 'value) big_map -> bool"),Object(o.b)(s.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let mem: ('key, big_map ('key, 'value)) => bool"),Object(o.b)(s.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let mem: (key: 'key, big_map: big_map <'key, 'value>) => bool"),Object(o.b)("p",null,"Test whether a given key exists within a big map. "),Object(o.b)(i.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),'const has_balance : bool =\n  Big_map.mem (("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" : address), moves)\n'))),Object(o.b)(i.b,{syntax:"cameligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=big_map",group:"big_map"}),'let has_balance : bool =\n  Big_map.mem ("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" : address) moves\n'))),Object(o.b)(i.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=big_map",group:"big_map"}),'let has_balance: bool =\n  Big_map.mem("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN": address, moves);\n'))),Object(o.b)(i.b,{syntax:"jsligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=big_map",group:"big_map"}),'let has_balance: bool =\n  Big_map.mem(("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" as address), moves);\n'))),Object(o.b)(s.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function update : 'key -> option 'value -> big_map ('key, 'value) -> big_map ('key, 'value)"),Object(o.b)(s.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val update: 'key -> 'value option -> ('key, 'value) big_map -> ('key, 'value) big_map"),Object(o.b)(s.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let update: ('key, option('value), big_map('key, 'value)) => big_map('key, 'value)"),Object(o.b)(s.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let update: (key: 'key, value: option<'value>, big_map: big_map<'key, 'value>) => big_map<'key, 'value>"),Object(o.b)("p",null,"Note: when ",Object(o.b)("inlineCode",{parentName:"p"},"None")," is used as a value, the value is removed from the big_map."),Object(o.b)(i.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),'  const updated_big_map : register = Big_map.update(("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN": address), Some (4,9), moves);\n')),Object(o.b)("p",null,"Alternatively:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),'\nfunction update (var m : register) : register is\n  block {\n    m [("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN": address)] := (4,9);\n  } with m\n  \n')),Object(o.b)("p",null,"If multiple bindings need to be updated, PascaLIGO offers a ",Object(o.b)("em",{parentName:"p"},"patch\ninstruction")," for maps, similar to that for records."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),'function assignments (var m : register) : register is\n  block {\n    patch m with map [\n      ("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" : address) -> (4,9);\n      ("tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx" : address) -> (1,2)\n    ]\n  } with m\n')),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Note the use of the keyword ",Object(o.b)("inlineCode",{parentName:"p"},"map")," instead of ",Object(o.b)("inlineCode",{parentName:"p"},"big_map")," (which is not\na keyword)."))),Object(o.b)(i.b,{syntax:"cameligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=big_map",group:"big_map"}),'let updated_map : register =\n  Big_map.update\n    ("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" : address) (Some (4,9)) moves\n'))),Object(o.b)(i.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=big_map",group:"big_map"}),'let updated_map: register =\n  Big_map.update\n    (("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN": address), Some((4,9)), moves);\n'))),Object(o.b)(i.b,{syntax:"jsligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=big_map",group:"big_map"}),'let updated_map: register =\n  Big_map.update\n    (("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" as address), Some([4,9]), moves);\n'))),Object(o.b)(s.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function get_and_update : key -> option(value) -> big_map (key, value) -> option(value) * big_map (key, value)"),Object(o.b)(s.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val get_and_update : 'key -> 'value option -> ('key, 'value) big_map -> value option * ('key, 'value) big_map"),Object(o.b)(s.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let get_and_update : 'key => option('value) => big_map ('key, 'value) => option('value) * big_map ('key, 'value)"),Object(o.b)("p",null,"Similar to ",Object(o.b)("inlineCode",{parentName:"p"},"update")," but it also returns the value that was previously stored in the big_map"),Object(o.b)(s.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function add : 'key -> 'value -> big_map ('key, 'value) -> big_map ('key, 'value)"),Object(o.b)(s.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val add : 'key -> 'value -> ('key, 'value) big_map  -> ('key, 'value) big_map"),Object(o.b)(s.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let add: ('key, 'value, big_map('key, 'value)) => big_map('key, 'value)"),Object(o.b)(s.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let add: (key: 'key, value: 'value, big_map: big_map<'key, 'value>) => big_map<'key, 'value>"),Object(o.b)(i.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),'const added_item : register = Big_map.add (("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" : address), (4, 9), moves)\n'))),Object(o.b)(i.b,{syntax:"cameligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=big_map",group:"big_map"}),'let add (m : register) : register =\n  Big_map.add\n    ("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" : address) (4,9) m\n'))),Object(o.b)(i.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=big_map",group:"big_map"}),'let add = (m: register): register =>\n  Big_map.add\n    (("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN": address), (4,9), m);\n'))),Object(o.b)(i.b,{syntax:"jsligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=big_map",group:"big_map"}),'let add = (m: register): register =>\n  Big_map.add\n    (("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" as address), [4,9], m);\n'))),Object(o.b)(s.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function remove: 'key -> big_map ('key, 'value) -> big_map ('key, 'value)"),Object(o.b)(s.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val remove: 'key -> ('key, 'value) big_map -> ('key, 'value) big_map"),Object(o.b)(s.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let remove: ('key, big_map('key, 'value)) => big_map('key, 'value)"),Object(o.b)(s.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let remove: (key: 'key, big_map: big_map<'key, 'value>) => big_map<'key, 'value>"),Object(o.b)(i.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),'  const updated_map : register = \n    Big_map.remove (("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN": address), moves)\n')),Object(o.b)("p",null,"Alternatively, the instruction ",Object(o.b)("inlineCode",{parentName:"p"},"remove key from map m")," removes the key\n",Object(o.b)("inlineCode",{parentName:"p"},"key")," from the big map ",Object(o.b)("inlineCode",{parentName:"p"},"m")," (note that the keyword is ",Object(o.b)("inlineCode",{parentName:"p"},"map"),", not\n",Object(o.b)("inlineCode",{parentName:"p"},"big_map"),")."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=big_map",group:"big_map"}),'function rem (var m : register) : register is\n  block {\n    remove ("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN": address) from map moves\n  } with m\n\nconst updated_map : register = rem (moves)\n'))),Object(o.b)(i.b,{syntax:"cameligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=big_map",group:"big_map"}),'let updated_map : register =\n  Big_map.remove ("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN": address) moves\n'))),Object(o.b)(i.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=big_map",group:"big_map"}),'let updated_map: register =\n  Big_map.remove(("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN": address), moves)\n'))),Object(o.b)(i.b,{syntax:"jsligo",mdxType:"Syntax"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=big_map",group:"big_map"}),'let updated_map: register =\n  Big_map.remove(("tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN" as address), moves); \n'))))}m.isMDXComponent=!0},457:function(e,a,t){"use strict";t.d(a,"a",(function(){return b})),t.d(a,"b",(function(){return u}));var n=t(0),r=t.n(n);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),c=function(e){var a=r.a.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},b=function(e){var a=c(e.components);return r.a.createElement(p.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},g=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=c(t),g=n,u=b["".concat(i,".").concat(g)]||b[g]||m[g]||o;return t?r.a.createElement(u,s(s({ref:a},p),{},{components:t})):r.a.createElement(u,s({ref:a},p))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,i=new Array(o);i[0]=g;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},458:function(e,a,t){"use strict";var n=t(0),r=t.n(n).a.createContext("pascaligo");a.a=r},459:function(e,a,t){"use strict";var n=t(0),r=t.n(n),o=t(458);t.d(a,"a",(function(){return o.a})),a.b=function(e){return r.a.createElement(o.a.Consumer,null,(function(a){return a===e.syntax?e.children:r.a.createElement(r.a.Fragment,null)}))}},460:function(e,a,t){"use strict";t.r(a),t.d(a,"Prism",(function(){return n.a})),t.d(a,"defaultProps",(function(){return i}));var n=t(22),r={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","at-rule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]},o=t(0),i={Prism:n.a,theme:r};function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(){return(l=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}var p=/\r\n|\r|\n/,c=function(e){0===e.length?e.push({types:["plain"],content:"",empty:!0}):1===e.length&&""===e[0].content&&(e[0].empty=!0)},b=function(e,a){var t=e.length;return t>0&&e[t-1]===a?e:e.concat(a)},m=function(e,a){var t=e.plain,n=Object.create(null),r=e.styles.reduce((function(e,t){var n=t.languages,r=t.style;return n&&!n.includes(a)||t.types.forEach((function(a){var t=l({},e[a],r);e[a]=t})),e}),n);return r.root=t,r.plain=l({},t,{backgroundColor:null}),r};function g(e,a){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&-1===a.indexOf(n)&&(t[n]=e[n]);return t}var u=function(e){function a(){for(var a=this,t=[],n=arguments.length;n--;)t[n]=arguments[n];e.apply(this,t),s(this,"getThemeDict",(function(e){if(void 0!==a.themeDict&&e.theme===a.prevTheme&&e.language===a.prevLanguage)return a.themeDict;a.prevTheme=e.theme,a.prevLanguage=e.language;var t=e.theme?m(e.theme,e.language):void 0;return a.themeDict=t})),s(this,"getLineProps",(function(e){var t=e.key,n=e.className,r=e.style,o=l({},g(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),i=a.getThemeDict(a.props);return void 0!==i&&(o.style=i.plain),void 0!==r&&(o.style=void 0!==o.style?l({},o.style,r):r),void 0!==t&&(o.key=t),n&&(o.className+=" "+n),o})),s(this,"getStyleForToken",(function(e){var t=e.types,n=e.empty,r=t.length,o=a.getThemeDict(a.props);if(void 0!==o){if(1===r&&"plain"===t[0])return n?{display:"inline-block"}:void 0;if(1===r&&!n)return o[t[0]];var i=n?{display:"inline-block"}:{},s=t.map((function(e){return o[e]}));return Object.assign.apply(Object,[i].concat(s))}})),s(this,"getTokenProps",(function(e){var t=e.key,n=e.className,r=e.style,o=e.token,i=l({},g(e,["key","className","style","token"]),{className:"token "+o.types.join(" "),children:o.content,style:a.getStyleForToken(o),key:void 0});return void 0!==r&&(i.style=void 0!==i.style?l({},i.style,r):r),void 0!==t&&(i.key=t),n&&(i.className+=" "+n),i}))}return e&&(a.__proto__=e),a.prototype=Object.create(e&&e.prototype),a.prototype.constructor=a,a.prototype.render=function(){var e=this.props,a=e.Prism,t=e.language,n=e.code,r=e.children,o=this.getThemeDict(this.props),i=a.languages[t];return r({tokens:function(e){for(var a=[[]],t=[e],n=[0],r=[e.length],o=0,i=0,s=[],l=[s];i>-1;){for(;(o=n[i]++)<r[i];){var m=void 0,g=a[i],u=t[i][o];if("string"==typeof u?(g=i>0?g:["plain"],m=u):(g=b(g,u.type),u.alias&&(g=b(g,u.alias)),m=u.content),"string"==typeof m){var y=m.split(p),d=y.length;s.push({types:g,content:y[0]});for(var j=1;j<d;j++)c(s),l.push(s=[]),s.push({types:g,content:y[j]})}else i++,a.push(g),t.push(m),n.push(0),r.push(m.length)}i--,a.pop(),t.pop(),n.pop(),r.pop()}return c(s),l}(void 0!==i?a.tokenize(n,i,t):[n]),className:"prism-code language-"+t,style:void 0!==o?o.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},a}(o.Component);a.default=u},461:function(e,a,t){"use strict";var n=t(0),r=t(463);a.a=function(){var e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useThemeContext` is used outside of `Layout` Component. See https://v2.docusaurus.io/docs/theme-classic#usethemecontext.");return e}},462:function(e,a,t){"use strict";a.a={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}},463:function(e,a,t){"use strict";var n=t(0),r=t.n(n).a.createContext(void 0);a.a=r},464:function(e,a,t){"use strict";var n=t(0),r=t.n(n),o=t(460),i=t(23),s=t(461),l=t(459),p=t(462);function c(){return(c=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}var b=t(460).Prism;b.languages=Object.assign({},b.languages,{pascaligo:{comment:[/\(\*[\s\S]+?\*\)/,/\/\/.*/],string:{pattern:/(?:'(?:''|[^'\r\n])*'|#[&$%]?[a-f\d]+)+|\^[a-z]/i,greedy:!0},keyword:[{pattern:/(^|[^&])\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:dispose|exit|false|new|true)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\b/i,lookbehind:!0}],number:[/(?:[&%]\d+|\$[a-f\d]+)/i,/\b\d+(?:\.\d+)?(?:e[+-]?\d+)?/i],operator:[/\.\.|\*\*|:=|<[<=>]?|>[>=]?|[+\-*\/]=?|[@^=]/i,{pattern:/(^|[^&])\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\b/,lookbehind:!0}],punctuation:/\(\.|\.\)|[()\[\]:;,.]/},reasonligo:Object.assign({},b.languages.reason,{comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]}),cameligo:Object.assign({},b.languages.ocaml,{comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]}),jsligo:b.languages.typescript}),a.a=function(e){var a=Object(i.default)().siteConfig.themeConfig.prism,t=void 0===a?{}:a,b=Object(s.a)().isDarkTheme,m=t.theme||p.a,g=t.darkTheme||m,u=b?g:m,y=Object(n.useState)(!1),d=y[0],j=y[1];return Object(n.useEffect)((function(){j(!0)}),[]),r.a.createElement(l.a.Consumer,null,(function(a){return a===e.syntax?r.a.createElement(o.default,c({},o.defaultProps,{key:d,language:e.syntax,code:e.children,theme:u}),(function(e){var a=e.className,t=(e.style,e.tokens),n=e.getLineProps,o=e.getTokenProps;return r.a.createElement("pre",{className:a,style:{backgroundColor:"var(--ifm-background-color)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},t.map((function(e,a){return r.a.createElement("div",n({line:e,key:a}),e.map((function(e,a){return r.a.createElement("span",o({token:e,key:a}))})))})))})):r.a.createElement("div",null)}))}}}]);