(window.webpackJsonp=window.webpackJsonp||[]).push([[367],{440:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return u})),a.d(t,"default",(function(){return b}));var n=a(3),s=a(7),r=(a(0),a(457)),l=a(459),o=a(464),c={id:"set-reference",title:"Set",description:"Set operations",hide_table_of_contents:!0},i={unversionedId:"reference/set-reference",id:"version-0.25.0/reference/set-reference",isDocsHomePage:!1,title:"Set",description:"Set operations",source:"@site/versioned_docs/version-0.25.0/reference/set.md",slug:"/reference/set-reference",permalink:"/docs/reference/set-reference",version:"0.25.0",sidebar:"version-0.25.0/docs",previous:{title:"Map",permalink:"/docs/reference/map-reference"},next:{title:"String",permalink:"/docs/reference/string-reference"}},u=[],p={toc:u};function b(e){var t=e.components,a=Object(s.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Sets are unordered collections of unique values of the same type."),Object(r.b)(o.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function empty : set('value)"),Object(r.b)(o.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val empty : 'value set"),Object(r.b)(o.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let empty: set('value)"),Object(r.b)(o.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let empty: set<'value>"),Object(r.b)("p",null,"Create an empty set."),Object(r.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=sets",group:"sets"}),"const my_set : set (int) = Set.empty\n")),Object(r.b)("p",null,"Alternative syntax:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=sets",group:"sets"}),"const my_set : set (int) = set []\n"))),Object(r.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=sets",group:"sets"}),"let my_set : int set = Set.empty\n"))),Object(r.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=sets",group:"sets"}),"let my_set : set (int) = Set.empty;\n"))),Object(r.b)(l.b,{syntax:"jsligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=sets",group:"sets"}),"let my_set: set<int> = Set.empty;\n"))),Object(r.b)(o.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function literal : list('value) -> set('value)"),Object(r.b)(o.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val literal : 'value list -> 'value set"),Object(r.b)(o.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let literal: list('value) => set('value)"),Object(r.b)(o.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let literal: (input: list<'value>) => set<'value>"),Object(r.b)("p",null,"Create a non-empty set."),Object(r.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=sets",group:"sets"}),"const my_set : set (int) = Set.literal (list [3; 2; 2; 1])\n")),Object(r.b)("p",null,"Or use the following syntax sugar:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=sets",group:"sets"}),"const my_set : set (int) = set [3; 2; 2; 1]\n"))),Object(r.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=sets",group:"sets"}),"let my_set : int set =\n  Set.literal [3; 2; 2; 1]\n"))),Object(r.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=sets",group:"sets"}),"let my_set : set (int) =\n  Set.literal ([3, 2, 2, 1]);\n"))),Object(r.b)(l.b,{syntax:"jsligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=sets",group:"sets"}),"let my_set : set<int> =\n  Set.literal(list([3, 2, 2, 1]));\n"))),Object(r.b)(o.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function mem : 'value -> set('value) -> 'bool"),Object(r.b)(o.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val mem : 'value -> 'value set -> bool"),Object(r.b)(o.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let mem: ('value, set('value)) => bool"),Object(r.b)(o.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let mem: (v: 'value, set: set<'value>) => bool"),Object(r.b)("p",null,"Checks if a value exists in the set."),Object(r.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=sets",group:"sets"}),"const contains_3 : bool = Set.mem(3, my_set)\n")),Object(r.b)("p",null,"Or:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=sets",group:"sets"}),"const contains_3_alt : bool = my_set contains 3\n"))),Object(r.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=sets",group:"sets"}),"let contains_3 : bool = Set.mem 3 my_set\n"))),Object(r.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=sets",group:"sets"}),"let contains_3 : bool = Set.mem (3, my_set);\n"))),Object(r.b)(l.b,{syntax:"jsligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=sets",group:"sets"}),"let contains_3 : bool = Set.mem (3, my_set);\n"))),Object(r.b)(o.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function cardinal : set('value) -> nat"),Object(r.b)(o.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val cardinal : 'value set -> nat"),Object(r.b)(o.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let cardinal: set('value) => nat"),Object(r.b)(o.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let cardinal: (set: set<'value>) => nat"),Object(r.b)("p",null,"Number of elements in a set."),Object(r.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=sets",group:"sets"}),"const cardinal : nat = Set.size (my_set)\n"))),Object(r.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=sets",group:"sets"}),"let cardinal : nat = Set.size my_set\n"))),Object(r.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=sets",group:"sets"}),"let cardinal : nat = Set.size (my_set);\n"))),Object(r.b)(l.b,{syntax:"jsligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=sets",group:"sets"}),"let cardinal: nat = Set.size(my_set);\n"))),Object(r.b)(o.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function add : 'value -> set('value) -> set('value)"),Object(r.b)(o.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val add : 'value -> 'value set -> 'value set"),Object(r.b)(o.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let add: ('value, set('value)) => set('value)"),Object(r.b)(o.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let add: (value: 'value, set: set<'value>) => set<'value>"),Object(r.b)("p",null,"Add a value to a set."),Object(r.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=sets",group:"sets"}),"const updated_set = Set.add (4, my_set)\n"))),Object(r.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=sets",group:"sets"}),"let updated_set = Set.add 4 my_set\n"))),Object(r.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=sets",group:"sets"}),"let updated_set = Set.add (4, my_set);\n"))),Object(r.b)(l.b,{syntax:"jsligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=sets",group:"sets"}),"let updated_set = Set.add (4, my_set);\n"))),Object(r.b)(o.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function remove : 'value -> set('value) -> set('value)"),Object(r.b)(o.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val remove : 'value -> 'value set -> 'value set"),Object(r.b)(o.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let remove: ('value, set('value)) => set('value)"),Object(r.b)(o.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let remove: (value: 'value, set: set<'value>) => set<'value>"),Object(r.b)("p",null,"Remove a value from a set."),Object(r.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=sets",group:"sets"}),"const updated_set = Set.remove (3, my_set)\n"))),Object(r.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=sets",group:"sets"}),"let updated_set = Set.remove 3 my_set\n"))),Object(r.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=sets",group:"sets"}),"let updated_set = Set.remove (3, my_set);\n"))),Object(r.b)(l.b,{syntax:"jsligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=sets",group:"sets"}),"let updated_set = Set.remove (3, my_set);\n"))),Object(r.b)(o.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function update : 'a -> bool -> set('a) -> set('a)"),Object(r.b)(o.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val update : 'a -> bool -> 'a set -> 'a set"),Object(r.b)(o.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let update: ('a, bool, set('a)) => set('a)"),Object(r.b)(o.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let update: (value : 'a, flag : bool, set : set<'a>) => set<'a>"),Object(r.b)("p",null,"add or remove an element in a set based on the boolean value being passed."),Object(r.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=sets",group:"sets"}),"// in case of True value will be added to the set \nconst updated_set = Set.update (4, True, my_set)\n\n// in case of False value will be removed from the set \nconst updated_set = Set.update (4, False, my_set)\n"))),Object(r.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=sets",group:"sets"}),"(* in case of true value will be added to the set *)\nlet updated_set = Set.update 4 true my_set\n\n(* in case of false value will be removed from the set *)\nlet updated_set = Set.update 4 false my_set\n"))),Object(r.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=sets",group:"sets"}),"/* in case of true value will be added to the set */\nlet updated_set = Set.update (4, true, my_set);\n\n\n/* in case of false value will be removed from the set */\nlet updated_set = Set.update (4, false, my_set);\n"))),Object(r.b)(l.b,{syntax:"jsligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=sets",group:"sets"}),"// in case of true value will be added to the set \nlet updated_set = Set.update (4, true, my_set);\n\n// in case of false value will be removed from the set \nlet updated_set = Set.update (4, false, my_set);\n"))),Object(r.b)(o.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function iter : ('a -> unit) -> set('a) -> unit"),Object(r.b)(o.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val iter : ('a -> unit) -> 'a set -> unit"),Object(r.b)(o.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let iter: (('a => unit), set('a)) => unit"),Object(r.b)(o.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let iter: (iterator: ((item: 'a) => unit), set: set<'a>) => unit"),Object(r.b)("p",null,"Iterate over values in a set."),Object(r.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=sets",group:"sets"}),'function iter_op (const s : set (int)) : unit is\n  block {\n    function iterated (const i : int) : unit is\n      if i > 2 then Unit else (failwith ("Below range.") : unit)\n  } with Set.iter (iterated, s)\n')),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Note that ",Object(r.b)("inlineCode",{parentName:"p"},"set_iter")," is ",Object(r.b)("em",{parentName:"p"},"deprecated"),"."))),Object(r.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=sets",group:"sets"}),"let iter_op (s : int set) : unit =\n  let predicate = fun (i : int) -> assert (i > 3)\n  in Set.iter predicate s\n"))),Object(r.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=sets",group:"sets"}),"let iter_op = (s : set (int)) : unit => {\n  let predicate = (i : int) => assert (i > 3);\n  Set.iter (predicate, s);\n};\n"))),Object(r.b)(l.b,{syntax:"jsligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=sets",group:"sets"}),"let iter_op = (s: set<int>): unit => {\n  let predicate = (i : int): unit => assert(i > 3);\n  Set.iter(predicate, s);\n};\n"))),Object(r.b)(o.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function fold : (('accumulator -> 'item -> 'accumulator) -> set ('item) -> 'accumulator) -> 'accumulator"),Object(r.b)(o.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val fold : (('accumulator * 'item) -> 'accumulator) -> 'item set -> 'accumulator -> 'accumulator"),Object(r.b)(o.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let fold: ((('accumulator, 'item) => 'accumulator), set('item), 'accumulator) => 'accumulator"),Object(r.b)(o.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let fold: ((iterator: [accumulator: 'accumulator, item: 'item]) => 'accumulator), set: set<'item>, accumulator: 'accumulator) => 'accumulator"),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/language-basics/sets-lists-tuples#folded-operation"}),"Fold over values in a set")),Object(r.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=sets",group:"sets"}),"function sum (const acc : int; const i : int): int is acc + i\nconst sum_of_elements : int = Set.fold (sum, my_set, 0)\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Note that ",Object(r.b)("inlineCode",{parentName:"p"},"set_fold")," is ",Object(r.b)("em",{parentName:"p"},"deprecated"),"."))),Object(r.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=sets",group:"sets"}),"let sum (acc, i : int * int) : int = acc + i\nlet sum_of_elements : int = Set.fold sum my_set 0\n"))),Object(r.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=sets",group:"sets"}),"let sum = ((acc, i) : (int, int)) : int => acc + i;\nlet sum_of_elements : int = Set.fold (sum, my_set, 0);\n"))),Object(r.b)(l.b,{syntax:"jsligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=sets",group:"sets"}),"let sum = ([acc, i]: [int, int]): int => acc + i;\nlet sum_of_elements: int = Set.fold(sum, my_set, 0);\n"))),Object(r.b)(o.a,{syntax:"pascaligo",mdxType:"SyntaxTitle"},"function fold_desc: (('item -> 'accumulator -> 'accumulator) -> set ('item) -> 'accumulator) -> 'accumulator"),Object(r.b)(o.a,{syntax:"cameligo",mdxType:"SyntaxTitle"},"val fold_desc : (('item * 'accumulator) -> 'accumulator) -> 'item set -> 'accumulator -> 'accumulator"),Object(r.b)(o.a,{syntax:"reasonligo",mdxType:"SyntaxTitle"},"let fold_desc: ((('item, 'accumulator) => 'accumulator), set('item), 'accumulator) => 'accumulator"),Object(r.b)(o.a,{syntax:"jsligo",mdxType:"SyntaxTitle"},"let fold_desc: (((a: ['item, 'accumulator]) => 'accumulator), set<'item>, 'accumulator) => 'accumulator"),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/language-basics/sets-lists-tuples#folded-operation"}),"Fold over values in a set")),Object(r.b)(l.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=sets",group:"sets"}),"function sum_right (const i : int; const acc : int): int is acc + i\nconst sum_of_elements : int = Set.fold_desc (sum_right, my_set, 0)\n"))),Object(r.b)(l.b,{syntax:"cameligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=sets",group:"sets"}),"let sum_right (i, acc : int * int) : int = acc + i\nlet sum_of_elements : int = Set.fold_desc sum_right my_set 0\n"))),Object(r.b)(l.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=sets",group:"sets"}),"let sum_right = ((i, acc) : (int, int)) : int => acc + i;\nlet sum_of_elements : int = Set.fold_desc (sum_right, my_set, 0);\n"))),Object(r.b)(l.b,{syntax:"jsligo",mdxType:"Syntax"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=sets",group:"sets"}),"let sum_right = ([i, acc] : [int, int]) : int => acc + i;\nlet sum_of_elements : int = Set.fold_desc (sum_right, my_set, 0);\n"))))}b.isMDXComponent=!0},457:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return g}));var n=a(0),s=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var i=s.a.createContext({}),u=function(e){var t=s.a.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return s.a.createElement(i.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},m=s.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),p=u(a),m=n,g=p["".concat(l,".").concat(m)]||p[m]||b[m]||r;return a?s.a.createElement(g,o(o({ref:t},i),{},{components:a})):s.a.createElement(g,o({ref:t},i))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var i=2;i<r;i++)l[i]=a[i];return s.a.createElement.apply(null,l)}return s.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},458:function(e,t,a){"use strict";var n=a(0),s=a.n(n).a.createContext("pascaligo");t.a=s},459:function(e,t,a){"use strict";var n=a(0),s=a.n(n),r=a(458);a.d(t,"a",(function(){return r.a})),t.b=function(e){return s.a.createElement(r.a.Consumer,null,(function(t){return t===e.syntax?e.children:s.a.createElement(s.a.Fragment,null)}))}},460:function(e,t,a){"use strict";a.r(t),a.d(t,"Prism",(function(){return n.a})),a.d(t,"defaultProps",(function(){return l}));var n=a(22),s={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","at-rule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]},r=a(0),l={Prism:n.a,theme:s};function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var i=/\r\n|\r|\n/,u=function(e){0===e.length?e.push({types:["plain"],content:"",empty:!0}):1===e.length&&""===e[0].content&&(e[0].empty=!0)},p=function(e,t){var a=e.length;return a>0&&e[a-1]===t?e:e.concat(t)},b=function(e,t){var a=e.plain,n=Object.create(null),s=e.styles.reduce((function(e,a){var n=a.languages,s=a.style;return n&&!n.includes(t)||a.types.forEach((function(t){var a=c({},e[t],s);e[t]=a})),e}),n);return s.root=a,s.plain=c({},a,{backgroundColor:null}),s};function m(e,t){var a={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&-1===t.indexOf(n)&&(a[n]=e[n]);return a}var g=function(e){function t(){for(var t=this,a=[],n=arguments.length;n--;)a[n]=arguments[n];e.apply(this,a),o(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var a=e.theme?b(e.theme,e.language):void 0;return t.themeDict=a})),o(this,"getLineProps",(function(e){var a=e.key,n=e.className,s=e.style,r=c({},m(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),l=t.getThemeDict(t.props);return void 0!==l&&(r.style=l.plain),void 0!==s&&(r.style=void 0!==r.style?c({},r.style,s):s),void 0!==a&&(r.key=a),n&&(r.className+=" "+n),r})),o(this,"getStyleForToken",(function(e){var a=e.types,n=e.empty,s=a.length,r=t.getThemeDict(t.props);if(void 0!==r){if(1===s&&"plain"===a[0])return n?{display:"inline-block"}:void 0;if(1===s&&!n)return r[a[0]];var l=n?{display:"inline-block"}:{},o=a.map((function(e){return r[e]}));return Object.assign.apply(Object,[l].concat(o))}})),o(this,"getTokenProps",(function(e){var a=e.key,n=e.className,s=e.style,r=e.token,l=c({},m(e,["key","className","style","token"]),{className:"token "+r.types.join(" "),children:r.content,style:t.getStyleForToken(r),key:void 0});return void 0!==s&&(l.style=void 0!==l.style?c({},l.style,s):s),void 0!==a&&(l.key=a),n&&(l.className+=" "+n),l}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,a=e.language,n=e.code,s=e.children,r=this.getThemeDict(this.props),l=t.languages[a];return s({tokens:function(e){for(var t=[[]],a=[e],n=[0],s=[e.length],r=0,l=0,o=[],c=[o];l>-1;){for(;(r=n[l]++)<s[l];){var b=void 0,m=t[l],g=a[l][r];if("string"==typeof g?(m=l>0?m:["plain"],b=g):(m=p(m,g.type),g.alias&&(m=p(m,g.alias)),b=g.content),"string"==typeof b){var y=b.split(i),d=y.length;o.push({types:m,content:y[0]});for(var j=1;j<d;j++)u(o),c.push(o=[]),o.push({types:m,content:y[j]})}else l++,t.push(m),a.push(b),n.push(0),s.push(b.length)}l--,t.pop(),a.pop(),n.pop(),s.pop()}return u(o),c}(void 0!==l?t.tokenize(n,l,a):[n]),className:"prism-code language-"+a,style:void 0!==r?r.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(r.Component);t.default=g},461:function(e,t,a){"use strict";var n=a(0),s=a(463);t.a=function(){var e=Object(n.useContext)(s.a);if(null==e)throw new Error("`useThemeContext` is used outside of `Layout` Component. See https://v2.docusaurus.io/docs/theme-classic#usethemecontext.");return e}},462:function(e,t,a){"use strict";t.a={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]}},463:function(e,t,a){"use strict";var n=a(0),s=a.n(n).a.createContext(void 0);t.a=s},464:function(e,t,a){"use strict";var n=a(0),s=a.n(n),r=a(460),l=a(23),o=a(461),c=a(459),i=a(462);function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var p=a(460).Prism;p.languages=Object.assign({},p.languages,{pascaligo:{comment:[/\(\*[\s\S]+?\*\)/,/\/\/.*/],string:{pattern:/(?:'(?:''|[^'\r\n])*'|#[&$%]?[a-f\d]+)+|\^[a-z]/i,greedy:!0},keyword:[{pattern:/(^|[^&])\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:dispose|exit|false|new|true)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\b/i,lookbehind:!0},{pattern:/(^|[^&])\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\b/i,lookbehind:!0}],number:[/(?:[&%]\d+|\$[a-f\d]+)/i,/\b\d+(?:\.\d+)?(?:e[+-]?\d+)?/i],operator:[/\.\.|\*\*|:=|<[<=>]?|>[>=]?|[+\-*\/]=?|[@^=]/i,{pattern:/(^|[^&])\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\b/,lookbehind:!0}],punctuation:/\(\.|\.\)|[()\[\]:;,.]/},reasonligo:Object.assign({},p.languages.reason,{comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]}),cameligo:Object.assign({},p.languages.ocaml,{comment:[/(^|[^\\])\/\*[\s\S]*?\*\//,/\(\*[\s\S]*?\*\)/,/\/\/.*/]}),jsligo:p.languages.typescript}),t.a=function(e){var t=Object(l.default)().siteConfig.themeConfig.prism,a=void 0===t?{}:t,p=Object(o.a)().isDarkTheme,b=a.theme||i.a,m=a.darkTheme||b,g=p?m:b,y=Object(n.useState)(!1),d=y[0],j=y[1];return Object(n.useEffect)((function(){j(!0)}),[]),s.a.createElement(c.a.Consumer,null,(function(t){return t===e.syntax?s.a.createElement(r.default,u({},r.defaultProps,{key:d,language:e.syntax,code:e.children,theme:g}),(function(e){var t=e.className,a=(e.style,e.tokens),n=e.getLineProps,r=e.getTokenProps;return s.a.createElement("pre",{className:t,style:{backgroundColor:"var(--ifm-background-color)",fontSize:"1.1rem",fontWeight:"bold",padding:0,whiteSpace:"break-spaces",marginTop:"3rem"}},a.map((function(e,t){return s.a.createElement("div",n({line:e,key:t}),e.map((function(e,t){return s.a.createElement("span",r({token:e,key:t}))})))})))})):s.a.createElement("div",null)}))}}}]);