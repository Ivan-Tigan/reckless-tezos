(window.webpackJsonp=window.webpackJsonp||[]).push([[212],{286:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return o})),t.d(a,"metadata",(function(){return s})),t.d(a,"toc",(function(){return r})),t.d(a,"default",(function(){return p}));var n=t(3),l=t(7),c=(t(0),t(457)),b=t(459),o={id:"boolean-if-else",title:"Booleans and Conditionals"},s={unversionedId:"language-basics/boolean-if-else",id:"version-0.25.0/language-basics/boolean-if-else",isDocsHomePage:!1,title:"Booleans and Conditionals",description:"Booleans",source:"@site/versioned_docs/version-0.25.0/language-basics/boolean-if-else.md",slug:"/language-basics/boolean-if-else",permalink:"/docs/language-basics/boolean-if-else",version:"0.25.0",sidebar:"version-0.25.0/docs",previous:{title:"Functions",permalink:"/docs/language-basics/functions"},next:{title:"Iteration",permalink:"/docs/language-basics/loops"}},r=[{value:"Booleans",id:"booleans",children:[]},{value:"Comparing Values",id:"comparing-values",children:[{value:"Comparing Strings",id:"comparing-strings",children:[]},{value:"Comparing numbers",id:"comparing-numbers",children:[]},{value:"Comparing tez",id:"comparing-tez",children:[]}]},{value:"Conditionals",id:"conditionals",children:[]}],i={toc:r};function p(e){var a=e.components,t=Object(l.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},i,t,{components:a,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"booleans"},"Booleans"),Object(c.b)("p",null,"The type of a boolean value is ",Object(c.b)("inlineCode",{parentName:"p"},"bool"),". Here is how to define a boolean\nvalue:"),Object(c.b)(b.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=a",group:"a"}),"const a : bool = True   // Also: true\nconst b : bool = False  // Also: false\n"))),Object(c.b)(b.b,{syntax:"cameligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=a",group:"a"}),"let a : bool = true\nlet b : bool = false\n"))),Object(c.b)(b.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=a",group:"a"}),"let a : bool = true;\nlet b : bool = false;\n"))),Object(c.b)(b.b,{syntax:"jsligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=a",group:"a"}),"let a: bool = true;\nlet b: bool = false;\n"))),Object(c.b)("p",null,"Common operations:"),Object(c.b)(b.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(c.b)("div",{className:"boolean-example-table"},Object(c.b)("div",{className:"operation"},"and"),Object(c.b)("div",{className:"description"},"Logical and"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo"}),"const logical_and: bool = True and True;\n"))),Object(c.b)("div",{className:"operation"},"or"),Object(c.b)("div",{className:"description"},"Logical or"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo"}),"const logical_or: bool = False or True;\n"))),Object(c.b)("div",{className:"operation"},"not"),Object(c.b)("div",{className:"description"},"Logical not"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo"}),"const logical_not: bool = not False;\n"))),Object(c.b)("div",{className:"operation"},"="),Object(c.b)("div",{className:"description"},"Equals"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo"}),"const eq: bool = 2 = 3;\n"))),Object(c.b)("div",{className:"operation"},"=/="),Object(c.b)("div",{className:"description"},"Not equals"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo"}),"const not_eq: bool = 2 =/= 3;\n"))),Object(c.b)("div",{className:"operation"},">"),Object(c.b)("div",{className:"description"},"Greater than"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo"}),"const gt: bool = 4 > 3;\n"))),Object(c.b)("div",{className:"operation"},"<"),Object(c.b)("div",{className:"description"},"Less than"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo"}),"const lt: bool = 4 < 3;\n"))),Object(c.b)("div",{className:"operation"},">="),Object(c.b)("div",{className:"description"},"Greater than or equal to"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo"}),"const gte: bool = 4 >= 3;\n"))),Object(c.b)("div",{className:"operation"},"<="),Object(c.b)("div",{className:"description"},"Less than or equal to"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo"}),"const lte: bool = 4 <= 3;\n"))))),Object(c.b)(b.b,{syntax:"cameligo",mdxType:"Syntax"},Object(c.b)("div",{className:"boolean-example-table"},Object(c.b)("div",{className:"operation"},"&&"),Object(c.b)("div",{className:"description"},"Logical and"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo"}),"let logical_and: bool = true && true\n"))),Object(c.b)("div",{className:"operation"},"||"),Object(c.b)("div",{className:"description"},"Logical or"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo"}),"let logical_or: bool = false || true\n"))),Object(c.b)("div",{className:"operation"},"!"),Object(c.b)("div",{className:"description"},"Logical not"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo"}),"let logical_not: bool = not false\n"))),Object(c.b)("div",{className:"operation"},"="),Object(c.b)("div",{className:"description"},"Equals"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo"}),"let eq: bool = 2 = 3\n"))),Object(c.b)("div",{className:"operation"},"<>"),Object(c.b)("div",{className:"description"},"Not equals"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo"}),"let not_eq: bool = 2 <> 3\n"))),Object(c.b)("div",{className:"operation"},">"),Object(c.b)("div",{className:"description"},"Greater than"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo"}),"let gt: bool = 4 > 3\n"))),Object(c.b)("div",{className:"operation"},"<"),Object(c.b)("div",{className:"description"},"Less than"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo"}),"let lt: bool = 4 < 3\n"))),Object(c.b)("div",{className:"operation"},">="),Object(c.b)("div",{className:"description"},"Greater than or equal to"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo"}),"let gte: bool = 4 >= 3\n"))),Object(c.b)("div",{className:"operation"},"<="),Object(c.b)("div",{className:"description"},"Less than or equal to"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo"}),"let lte: bool = 4 <= 3\n"))))),Object(c.b)(b.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(c.b)("div",{className:"boolean-example-table"},Object(c.b)("div",{className:"operation"},"&&"),Object(c.b)("div",{className:"description"},"Logical and"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo"}),"let logical_and: bool = true && true;\n"))),Object(c.b)("div",{className:"operation"},"||"),Object(c.b)("div",{className:"description"},"Logical or"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo"}),"let logical_or: bool = false || true;\n"))),Object(c.b)("div",{className:"operation"},"!"),Object(c.b)("div",{className:"description"},"Logical not"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo"}),"let logical_not: bool = !false;\n"))),Object(c.b)("div",{className:"operation"},"=="),Object(c.b)("div",{className:"description"},"Equals"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo"}),"let eq: bool = 2 == 3;\n"))),Object(c.b)("div",{className:"operation"},"!="),Object(c.b)("div",{className:"description"},"Not equals"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo"}),"let not_eq: bool = 2 != 3;\n"))),Object(c.b)("div",{className:"operation"},">"),Object(c.b)("div",{className:"description"},"Greater than"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo"}),"let gt: bool = 4 > 3;\n"))),Object(c.b)("div",{className:"operation"},"<"),Object(c.b)("div",{className:"description"},"Less than"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo"}),"let lt: bool = 4 < 3;\n"))),Object(c.b)("div",{className:"operation"},">="),Object(c.b)("div",{className:"description"},"Greater than or equal to"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo"}),"let gte: bool = 4 >= 3;\n"))),Object(c.b)("div",{className:"operation"},"<="),Object(c.b)("div",{className:"description"},"Less than or equal to"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo"}),"let lte: bool = 4 <= 3;\n"))))),Object(c.b)(b.b,{syntax:"jsligo",mdxType:"Syntax"},Object(c.b)("div",{className:"boolean-example-table"},Object(c.b)("div",{className:"operation"},"&&"),Object(c.b)("div",{className:"description"},"Logical and"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo"}),"let logical_and: bool = true && true;\n"))),Object(c.b)("div",{className:"operation"},"||"),Object(c.b)("div",{className:"description"},"Logical or"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo"}),"let logical_or: bool = false || true;\n"))),Object(c.b)("div",{className:"operation"},"!"),Object(c.b)("div",{className:"description"},"Logical not"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo"}),"let logical_not: bool = !false;\n"))),Object(c.b)("div",{className:"operation"},"=="),Object(c.b)("div",{className:"description"},"Equals"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo"}),"let eq: bool = 2 == 3;\n"))),Object(c.b)("div",{className:"operation"},"!="),Object(c.b)("div",{className:"description"},"Not equals"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo"}),"let not_eq: bool = 2 != 3;\n"))),Object(c.b)("div",{className:"operation"},">"),Object(c.b)("div",{className:"description"},"Greater than"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo"}),"let gt: bool = 4 > 3;\n"))),Object(c.b)("div",{className:"operation"},"<"),Object(c.b)("div",{className:"description"},"Less than"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo"}),"let lt: bool = 4 < 3;\n"))),Object(c.b)("div",{className:"operation"},">="),Object(c.b)("div",{className:"description"},"Greater than or equal to"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo"}),"let gte: bool = 4 >= 3;\n"))),Object(c.b)("div",{className:"operation"},"<="),Object(c.b)("div",{className:"description"},"Less than or equal to"),Object(c.b)("div",{className:"example"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo"}),"let lte: bool = 4 <= 3;\n"))))),Object(c.b)("h2",{id:"comparing-values"},"Comparing Values"),Object(c.b)("p",null,"In LIGO, only values of the same type can be compared. Moreover, not\nall values of the same type can be compared, only those with\n",Object(c.b)("em",{parentName:"p"},"comparable types"),", which is a concept lifted from\nMichelson. Comparable types include, for instance, ",Object(c.b)("inlineCode",{parentName:"p"},"int"),", ",Object(c.b)("inlineCode",{parentName:"p"},"nat"),",\n",Object(c.b)("inlineCode",{parentName:"p"},"string"),", ",Object(c.b)("inlineCode",{parentName:"p"},"tez"),", ",Object(c.b)("inlineCode",{parentName:"p"},"timestamp"),", ",Object(c.b)("inlineCode",{parentName:"p"},"address"),", etc. As an example of\nnon-comparable types: maps, sets or lists are not comparable: if you\nwish to compare them, you will have to write your own comparison\nfunction."),Object(c.b)("h3",{id:"comparing-strings"},"Comparing Strings"),Object(c.b)(b.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=b",group:"b"}),'const a : string = "Alice"\nconst b : string = "Alice"\nconst c : bool = (a = b) // True\n'))),Object(c.b)(b.b,{syntax:"cameligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=b",group:"b"}),'let a : string = "Alice"\nlet b : string = "Alice"\nlet c : bool = (a = b) // true\n'))),Object(c.b)(b.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=b",group:"b"}),'let a : string = "Alice";\nlet b : string = "Alice";\nlet c : bool = (a == b); // true\n'))),Object(c.b)(b.b,{syntax:"jsligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=b",group:"b"}),'let a: string = "Alice";\nlet b: string = "Alice";\nlet c: bool = (a == b); // true\n'))),Object(c.b)("h3",{id:"comparing-numbers"},"Comparing numbers"),Object(c.b)(b.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=c",group:"c"}),"const a : int  = 5\nconst b : int  = 4\nconst c : bool = (a = b)\nconst d : bool = (a > b)\nconst e : bool = (a < b)\nconst f : bool = (a <= b)\nconst g : bool = (a >= b)\nconst h : bool = (a =/= b)\n"))),Object(c.b)(b.b,{syntax:"cameligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=c",group:"c"}),"let a : int  = 5\nlet b : int  = 4\nlet c : bool = (a = b)\nlet d : bool = (a > b)\nlet e : bool = (a < b)\nlet f : bool = (a <= b)\nlet g : bool = (a >= b)\nlet h : bool = (a <> b)\n"))),Object(c.b)(b.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=c",group:"c"}),"let a : int  = 5;\nlet b : int  = 4;\nlet c : bool = (a == b);\nlet d : bool = (a > b);\nlet e : bool = (a < b);\nlet f : bool = (a <= b);\nlet g : bool = (a >= b);\nlet h : bool = (a != b);\n"))),Object(c.b)(b.b,{syntax:"jsligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=c",group:"c"}),"let a: int  = 5;\nlet b: int  = 4;\nlet c: bool = (a == b);\nlet d: bool = (a > b);\nlet e: bool = (a < b);\nlet f: bool = (a <= b);\nlet g: bool = (a >= b);\nlet h: bool = (a != b);\n"))),Object(c.b)("h3",{id:"comparing-tez"},"Comparing tez"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"\ud83d\udca1 Comparing ",Object(c.b)("inlineCode",{parentName:"p"},"tez")," values is especially useful when dealing with an\namount sent in a transaction.")),Object(c.b)(b.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=d",group:"d"}),"const a : tez  = 5mutez\nconst b : tez  = 10mutez\nconst c : bool = (a = b) // False\n"))),Object(c.b)(b.b,{syntax:"cameligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=d",group:"d"}),"let a : tez  = 5mutez\nlet b : tez  = 10mutez\nlet c : bool = (a = b) // false\n"))),Object(c.b)(b.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=d",group:"d"}),"let a : tez  = 5mutez;\nlet b : tez  = 10mutez;\nlet c : bool = (a == b); // false\n"))),Object(c.b)(b.b,{syntax:"jsligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=d",group:"d"}),"let a: tez  = 5 as mutez;\nlet b: tez  = 10 as mutez;\nlet c: bool = (a == b); // false\n"))),Object(c.b)("h2",{id:"conditionals"},"Conditionals"),Object(c.b)("p",null,"Conditional logic enables forking the control flow depending on the\nstate."),Object(c.b)(b.b,{syntax:"pascaligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"group=e",group:"e"}),"type magnitude is Small | Large // See variant types.\n\nfunction compare (const n : nat) : magnitude is\n  if n < 10n then Small else Large\n")),Object(c.b)("p",null,"You can run the ",Object(c.b)("inlineCode",{parentName:"p"},"compare")," function defined above using the LIGO compiler\nlike this:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"ligo evaluate-call\ngitlab-pages/docs/language-basics/src/boolean-if-else/cond.ligo compare '21n'\n# Outputs: Large(Unit)\n")),Object(c.b)("p",null,"When the branches of the conditional are not a single expression, as\nabove, we need a block:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"skip",skip:!0}),"if x < y then\n  block {\n    const z : nat = x;\n    x := y; y := z\n  }\nelse skip;\n")),Object(c.b)("p",null,"As an exception to the rule, the blocks in a conditional branch do not\nneed to be introduced by the keyword ",Object(c.b)("inlineCode",{parentName:"p"},"block"),", so we could have written\ninstead:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-pascaligo",metastring:"skip",skip:!0}),"if x < y then {\n  const z : nat = x;\n  x := y; y := z\n}\nelse skip;\n"))),Object(c.b)(b.b,{syntax:"cameligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cameligo",metastring:"group=e",group:"e"}),"type magnitude = Small | Large // See variant types.\n\nlet compare (n : nat) : magnitude =\n  if n < 10n then Small else Large\n")),Object(c.b)("p",null,"You can run the ",Object(c.b)("inlineCode",{parentName:"p"},"compare")," function defined above using the LIGO compiler\nlike this:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"ligo evaluate-call\ngitlab-pages/docs/language-basics/src/boolean-if-else/cond.mligo compare '21n'\n# Outputs: Large\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Notice that, as in OCaml, in CameLIGO, if a conditional has a branch\n",Object(c.b)("inlineCode",{parentName:"p"},"else ()"),", that branch can be omitted. The resulting so-called\n",Object(c.b)("em",{parentName:"p"},"dangling else")," problem is parsed by associating any ",Object(c.b)("inlineCode",{parentName:"p"},"else")," to the\nclosest previous ",Object(c.b)("inlineCode",{parentName:"p"},"then"),"."))),Object(c.b)(b.b,{syntax:"reasonligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reasonligo",metastring:"group=e",group:"e"}),"type magnitude = Small | Large; // See variant types.\n\nlet compare = (n : nat) : magnitude =>\n  if (n < 10n) { Small; } else { Large; };\n")),Object(c.b)("p",null,"You can run the ",Object(c.b)("inlineCode",{parentName:"p"},"compare")," function defined above using the LIGO compiler\nlike this:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"ligo evaluate-call\ngitlab-pages/docs/language-basics/src/boolean-if-else/cond.religo compare '21n'\n# Outputs: Large\n"))),Object(c.b)(b.b,{syntax:"jsligo",mdxType:"Syntax"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsligo",metastring:"group=e",group:"e"}),'type magnitude = ["Small"] | ["Large"]; // See variant types.\n\nlet compare = (n : nat) : magnitude => {\n  if (n < (10 as nat)) { return Small (); } else { return Large (); };\n};\n')),Object(c.b)("p",null,"You can run the ",Object(c.b)("inlineCode",{parentName:"p"},"compare")," function defined above using the LIGO compiler\nlike this:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"ligo evaluate-call\ngitlab-pages/docs/language-basics/src/boolean-if-else/cond.religo compare '21n'\n# Outputs: Large\n"))))}p.isMDXComponent=!0},457:function(e,a,t){"use strict";t.d(a,"a",(function(){return p})),t.d(a,"b",(function(){return O}));var n=t(0),l=t.n(n);function c(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function b(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?b(Object(t),!0).forEach((function(a){c(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):b(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var r=l.a.createContext({}),i=function(e){var a=l.a.useContext(r),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=i(e.components);return l.a.createElement(r.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return l.a.createElement(l.a.Fragment,{},a)}},g=l.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,c=e.originalType,b=e.parentName,r=s(e,["components","mdxType","originalType","parentName"]),p=i(t),g=n,O=p["".concat(b,".").concat(g)]||p[g]||m[g]||c;return t?l.a.createElement(O,o(o({ref:a},r),{},{components:t})):l.a.createElement(O,o({ref:a},r))}));function O(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var c=t.length,b=new Array(c);b[0]=g;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,b[1]=o;for(var r=2;r<c;r++)b[r]=t[r];return l.a.createElement.apply(null,b)}return l.a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},458:function(e,a,t){"use strict";var n=t(0),l=t.n(n).a.createContext("pascaligo");a.a=l},459:function(e,a,t){"use strict";var n=t(0),l=t.n(n),c=t(458);t.d(a,"a",(function(){return c.a})),a.b=function(e){return l.a.createElement(c.a.Consumer,null,(function(a){return a===e.syntax?e.children:l.a.createElement(l.a.Fragment,null)}))}}}]);